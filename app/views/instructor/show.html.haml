%p.text-right
  = link_to "Download", export_instructor_path, class: "btn btn-primary"

%h1
  = @instructor.name

%table.table.table-bordered.table-condensed
  %thead
    %tr
      %th Undergraduate and Graduate Courses Taught
      %th Semester
      %th No. of Students Enrolled
      %th Mean Student Evaluation Score
      %th Dept Avg Student Evaluation Score for Equivalent Level Courses
      %th Avg. Numerical Grade Earned by Students
  %tbody
    - @instructor.course_section_groups.each do |course_section_group|
      %tr
        %td
          = course_name_for(course_section_group.first)
          - if can? :write, :all
            = (course_section_group.first.has_course_name? ? course_section_group.first.course_name : link_to("Add Course Name", new_course_name_path(subject_course: course_section_group.first.subject_course, return_to: instructor_path(@instructor))))
        %td= course_section_group.first.term
        %td= compute_total_enrollment(course_section_group)
        %td= compute_mean_student_eval_score(course_section_group).round(2)
        %td= compute_course_level_average(course_section_group, @evaluation_groups).round(2)
        %td= compute_mean_gpr(course_section_group).try(:round, 2)

  %tfoot
  / blank table row
  %tr
    %td{colspan: 4}

  %tr
    %td{colspan: 2} TOTAL NUMBER OF STUDENTS
    %td{colspan: 2}= @instructor.course_section_groups.map { |course_section_group| compute_total_enrollment(course_section_group) }.reduce(:+)
